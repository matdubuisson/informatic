				INTERFACES AND ABSTRACT CLASS

#5	Interface
The interface declares only the prototypes of the different method.
It'll be implemented by a class.

#5	Abstract Class
The abstract class is almost as a normal class : it can extends other class and
implements one interface. The difference is this abstract class cannot be used
to create an instance. It'll ask to be extended with an other class and the
instance will be created by this new class.

#3 ============================================================================

The interface are the contract for developping class that respects several functionnalities.
The abstract class are class that cannot be used to create new instance but these classes
implement a part or all the interface and can be extended by other non-abstract class.

As the normal classes, the interfaces and the abstract classes can have the same name than
the java file (to be a component of a new package).

Keywords :
3# extends 3# => Only one argument, the class extends of the specified class;
3# implements 3# => Tells the compilator what interfaces the class implement;
3# abstract 3# => Defines an abstract class;

Interfaces.java : 3// 
import myLib.Animal;

interface Car{
    // All cars need to have these methods !!
    public void speedUp();
    public void type();
    public void location();
}

abstract class DefaultType implements Car{
    @Override
    public void type(){
        System.out.println("Ferrari type");
    }
}

abstract class BelgianCar extends DefaultType implements Car{
    @Override
    public void location(){
        System.out.println("Belgium");
    }
}

class Manual{
    public static interface Rally{
        public void lights();
    }
    public static interface Road{
        public void wheels();
    }
}

class Ferrari extends DefaultType implements Car{
    @Override
    public void speedUp(){
        System.out.println("Drive to 300km/h");
    }
    @Override
    public void location(){
        System.out.println("Ferrari is from Italia !!");
    }
}

class FerrariF1 extends Ferrari implements Car, Manual.Road{
    @Override
    public void type(){
        System.out.println("Ferrari F1");
    }
    @Override
    public void wheels(){
        System.out.println("Robuste wheels for Ferrari F1 !!");
    }
}

class Mazda extends BelgianCar implements Car, Manual.Rally{
    @Override
    public void speedUp(){
        System.out.println("Mazda go up !!");
    }
    @Override
    public void type(){
        System.out.println("Mazda-type");
    }
    @Override
    public void lights(){
        System.out.println("Distance of the lights : 100m");
    }
}

class GuineaPig implements Animal{
    String name;

    public GuineaPig(String name){
        this.name = name;
    }

    @Override
    public void run(){
        System.out.println(this.name + " is running !!");
    }

    public void noise(){
        System.out.println("KOUIKOUI");
    }
}

public class Interfaces{
    public static void main(String[] args){
        Car f = new Ferrari(), f1 = new FerrariF1(), m = new Mazda();
        f.speedUp();
        f.type();
        f.location();
        f1.type();
        f1.location();
        // f1.wheels(); => Bad pointer
        m.speedUp();
        m.type();
        m.location();
        // m.lights(); => Bad pointer

        FerrariF1 f1_ = (FerrariF1) f1;
        f1_.wheels();
        ((Mazda) m).lights();

        // Reject all instance of abstract class
        // BelgianCar f_ = new Ferrari();
        // BelgianCar b = new BelgianCar();

        Animal oscar = new GuineaPig("Oscar");
        oscar.run();
        // oscar.noise(); => Animal type doesn't make pointers able to use this method !!
        GuineaPig gerald = new GuineaPig("Gérald");
        gerald.run();
        gerald.noise();
    }
}
 3//

myLib/Animal.java : 2// 
package myLib;

public interface Animal{
    // All animals need to have these methods
    public void run();
}
 2//

In the console : 2# 
racteur@rogy:~/Documents/informatic/Java/EXAMPLE_10$ javac Interfaces.java 
racteur@rogy:~/Documents/informatic/Java/EXAMPLE_10$ java Interfaces 
Drive to 300km/h
Ferrari type
Ferrari is from Italia !!
Ferrari F1
Ferrari is from Italia !!
Mazda go up !!
Mazda-type
Belgium
Robuste wheels for Ferrari F1 !!
Distance of the lights : 100m
Oscar is running !!
Gérald is running !!
KOUIKOUI
 2#
