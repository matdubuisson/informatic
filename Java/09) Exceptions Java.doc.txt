					EXCEPTIONS

#1		EXCEPTIONS INSTRUCTIONS (FOR PROCESS ERROR ONLY)

The following keywords are reserved for exceptions :
3# try 3# => Try a piece of code that can potentially raise a process error;
3# catch() 3# => This keyword is always behind a 3# try 3# instruction and
is activated when this has a process error and catches the raised error;
3# finally 3# => This executes a piece of code no matter what if the error
is raised or no;
3# throws 3# => This keyword declares all process error that a method is
allowed to raise (for example, if throws FileNotFoundException, the method
won't require to have a try / catch());
3# throw 3# => This keyword can raise a new exception;

#1		EXAMPLE

Except.java : 2// 
public class Except extends Throwable{

    public static double divide(double a, double b) throws Exception, ArithmeticException{
        if(b == 0.0){
            throw new ArithmeticException("Can't divide number by zero !!");
        } else if(b == 14){
            throw new Exception();
        }
        return a / b;
    }

    public static void throwException() throws Exception{
        throw new Exception();
    }

    public static void main(String[] args){
        try{
            System.out.println(String.format("Division => %.2f", divide(16, 2)));
        } catch(ArithmeticException e){
            System.out.println("Division has failed !!");
        } catch(Exception e){
            System.out.println("Undefined error raised !!");
        } finally{
            System.out.println("============================");
        }

        try{
            System.out.println(String.format("Division => %f", divide(16, 0)));
        } catch(ArithmeticException e){
            System.out.println("Division has failed !! : " + e);
        } catch(Exception e){
            System.out.println("Undefined error raised !!");
        } finally{
            System.out.println("============================");
        }

        try{
            System.out.println(String.format("Division => %f", divide(16, 14)));
        } catch(ArithmeticException e){
            System.out.println("Division has failed !!");
        } catch(Exception e){
            System.out.println("Undefined error raised !!");
        } finally{
            System.out.println("============================");
        }
    }
}
 2//

In the console : 2# 
racteur@rogy:~/Documents/informatic/Java/EXAMPLE_09$ javac Except.java 
racteur@rogy:~/Documents/informatic/Java/EXAMPLE_09$ java Except 
Division => 8.00
============================
Division has failed !! : java.lang.ArithmeticException: Can't divide number by zero !!
============================
Undefined error raised !!
============================
 2#
