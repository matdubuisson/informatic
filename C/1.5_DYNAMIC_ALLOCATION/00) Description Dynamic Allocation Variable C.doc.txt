				DESCRIPTION

The dynamic allocation is used when the program can't predict the size fo a data before the execution.

#0	stdlib.h
This library is used for the dynamic allocation.
It contains :
1# sizeof(<data_type>) 1# => This operator returns the size (type size_t) of a data;
3# space = malloc(<size>) 3# => Generate memory space and return it as a pointer of the good type;
3# new_space = realloc(old_space, <size>) 3# => Reuser an allocated space of malloc(), remove this
space if there is quite enough or add new if it's necessary;
3# free(<space>); 3# => Free the allocated space;

#4	malloc() and free()

#0 ====================================================================================

#5	ALLOC SIMPLE VARIABLE

malloc_variable.c : 2// 
#include <stdio.h>
#include <stdlib.h> // Where is malloc() and free()

#define _type unsigned int

unsigned char main(void){

    // Method 0 :
    _type p0 = 14;
    printf("p0 = %d\n", p0);

    // Method 1 :
    /*
        *p1 <=> *(p1 + 0) <=> p1[0]
    */
    _type *p1; // sizeof() isn't a function, it's an operator
    p1 = malloc(sizeof(_type));
    *p1 = 16;
    printf("p1 = %d\n", *p1);
    *p1 = 4 * *p1 + 3; // p1 = 4 * 16 + 3
    printf("p1 = %d\n", *p1);
    p1[0] = 17;
    printf("p1 = %d\n", *p1);
    free(p1);

    printf("Size of unsigned int : %d\n", (_type) sizeof(_type));

    return 0;
}
 2//

In the console : 2# 
racteur@rogy:~/Documents/informatic/C/1.5_DYNAMIC_ALLOCATION/EXAMPLE$ gcc malloc_variable.c -o prog && ./prog 
p0 = 14
p1 = 16
p1 = 67
p1 = 17
Size of unsigned int : 4
 2#

#0 ====================================================================================

#5	ALLOC ARRAY (ARRAY OF ARRAY OF CHARACTERS)

malloc_array.c : 2// 
#include <stdio.h>
#include <stdlib.h> // Where is malloc() and free()
#include <string.h>

#define empty_character 33

#define word_type unsigned char
#define word_length 30
#define word_list_length 5

word_type *create_word(void){
    static unsigned int i; // Declared only once !!
    word_type *word;
    word = malloc(sizeof(word_type) * (word_length + 1)); // More one for last character that is \0
    for(i = 0; i < word_length; i++){
        *(word + i) = empty_character;
    }
    *(word + i) = 0; // Last character, so the limit
    return word;
}

word_type **create_word_list(void){
    static unsigned int i;
    word_type **word_list;
    word_list = malloc(sizeof(word_type*) * (word_list_length + 1));
    for(i = 0; i < word_list_length; i++){
        *(word_list + i) = create_word();
    }
    *(word_list + i) = 0;
    return word_list;
}

void print_word_list(word_type **word_list){
    static unsigned int i;
    printf("Begin of list :\n");
    for(i = 0; i < word_list_length; i++){
        printf("%d) %s\n", i, *(word_list + i));
    }
    printf("End of list !!\n");
    return;
}

unsigned char main(void){

    printf("Length of unsigned char : %d\nLength of (unsigned char)* : %d\n", (unsigned int) sizeof(unsigned char), (unsigned char) sizeof(unsigned char *));

    word_type *myName = create_word();
    printf("==> %s\n", myName);
    strcpy(myName, "Racteur");
    printf("==> %s\n", myName);
    free(myName);

    word_type **names = create_word_list();
    print_word_list(names);
    strcpy(*(names + 0), "Racteur");
    strcpy(*(names + 1), "Joe");
    strcpy(*(names + 2), "Ralph");
    strcpy(*(names + 3), "Philou");
    strcpy(*(names + 4), "Zircoulouc");
    print_word_list(names);
    free(names);

    return 0;
}
 2//

In the console : 2# 
racteur@rogy:~/Documents/informatic/C/1.5_DYNAMIC_ALLOCATION/EXAMPLE$ gcc malloc_array.c -o prog
racteur@rogy:~/Documents/informatic/C/1.5_DYNAMIC_ALLOCATION/EXAMPLE$ ./prog
Length of unsigned char : 1
Length of (unsigned char)* : 8
==> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
==> Racteur
Begin of list :
0) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
1) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
3) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
4) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
End of list !!
Begin of list :
0) Racteur
1) Joe
2) Ralph
3) Philou
4) Zircoulouc
End of list !!
 2#

#0 ====================================================================================

#4	malloc(), realloc() and free()

realloc_array.c : 2// 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define True 1
#define command_length 40
#define command_scan_config "%40s"

void clear_buffer(void){
    while(getchar() != 10);
    return;
}

unsigned int main(void){

    unsigned char *command = malloc(sizeof(unsigned char) * (command_length + 1));

    unsigned char **array = malloc(sizeof(unsigned char*));

    unsigned int i, array_length;

    while(True){
        printf("==> "); scanf(command_scan_config, command);
        clear_buffer();
        if(!strcmp(command, "enter")){
            printf("How many commands do you want ? "); scanf("%2d", &array_length);
            clear_buffer();

            array = realloc(array, sizeof(unsigned char*) * (array_length + 1)); // Free useless old spaces, reuser old and add new if necessary

            for(i = 0; i < array_length; i++){
                *(array + i) = malloc(sizeof(unsigned char) * (command_length + 1));
                printf("> "); scanf(command_scan_config, *(array + i));
                clear_buffer();
            }

            printf("You have entered :\n");
            for(i = 0; i < array_length - 1; i++){
                printf("%s, ", *(array + i));
            }
            printf("%s\n", *(array + i));
        }
        if(!strcmp(command, "exit")){
            break;
        }
    }

    /* ================ */
    free(command);
    free(array);

    return 0;
}
 2//

In the console : 2# 
racteur@rogy:~/Documents/informatic/C/1.5_DYNAMIC_ALLOCATION/EXAMPLE$ gcc realloc_array.c -o prog && ./prog 
==> test
==> enter
How many commands do you want ? 7
> racteur
> test
> yolo
> ls
> joe_cool
> abcdefghijklm 
> eerezezrezrezr
You have entered :
racteur, test, yolo, ls, joe_cool, abcdefghijklm, eerezezrezrezr
==> exit
 2#
