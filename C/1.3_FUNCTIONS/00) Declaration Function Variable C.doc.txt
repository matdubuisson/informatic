#1		DECLARATION FUNCTION

#2	Description
5# syntax of function 5# : Write the behavior of the function
0# 
(returned type) functionName(arguments){
    /* BODY */
}
 0#
5# declaration of function 5# : Make callable the function
0# 
(returned type) functionName(arguments);
// char prt(int arg);
#1 OR :
(returned type) functionName(argumentsTypes);
// char prt(int);
#1 OR : (Not the best)
(returned type) functionName();
 0#

declare_simple_function.c : 2// 
#include <stdio.h>

unsigned int fct0(void);

unsigned int fct1(void){
    return 16;
}

void prFct(signed int); // Or : void prFct(signed int nbr);

unsigned char main(unsigned char argc, unsigned char **argv){
    unsigned int fct2(void);
    prFct(fct0());
    prFct(fct1());
    prFct(fct2());
    signed int var = 0;
    prFct(var = (signed int) (fct0() + fct1() + fct2()));
    printf("var ==> %d\n", var);


    return 0;
}

unsigned int fct0(void){
    return 14;
}

void prFct(signed int nbr){
    printf("prFct => %d\n", nbr);
    return;
}

unsigned int fct2(void){
    return 14 + 16;
}
 2//

In the console : 2// 
racteur@racteurtoshiba:~/Documents/informatic/C/1.3_FUNCTIONS/EXAMPLE$ gcc declare_simple_function.c -o prog
racteur@racteurtoshiba:~/Documents/informatic/C/1.3_FUNCTIONS/EXAMPLE$ ./prog 
prFct => 14
prFct => 16
prFct => 30
prFct => 60
var ==> 60
 2//
