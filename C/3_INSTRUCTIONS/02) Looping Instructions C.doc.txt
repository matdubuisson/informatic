#1		LOOPING INSTRUCTIONS

#2	Theory
There are three types of loop :
=> While loop : Repeat instruction while a certain
condition is validated. The condition is checked at
the BEGIN of each loop;
=> Until loop : Same principe. The condition is checked
at the END of each loop;
=> Count loop : Repeat the instruction X tiems;

#5	Create new loop

#2	Description
3# while(condition){ instructions } 3# => While loop;
3# do{ instructions } while(condition); 3# => Until loop;
3# for(declaration; condition; incrementation){ instructions } 3# => Count loop;

loops.c : 2// 
#include <stdio.h>

unsigned char main(unsigned char argc, unsigned char **argv){

    // While loop :
    unsigned int value = 0;
    while(value != 14){
        printf("Write 14 :");
        scanf("%d", &value);
    }
    
    // Until loop :
    do{ // With a simple while loop, this new loop shouldn't be executed !!
        printf("Re-write 14 :");
        scanf("%d", &value);
    }while(value != 14);

    // Count loop :
    for(unsigned char i = 0; i < value; i++){
        printf("%d**2 = %d\n", i, i*i);
    }

    return 0;
}
 2//

In the console : 2// 
racteur@racteurleader:~/Documents/informatic/C/3_INSTRUCTIONS/EXAMPLE$ gcc loops.c -o prog
racteur@racteurleader:~/Documents/informatic/C/3_INSTRUCTIONS/EXAMPLE$ ./prog 
Write 14 :9
Write 14 :1
Write 14 :14
Re-write 14 :16
Re-write 14 :14
0**2 = 0
1**2 = 1
2**2 = 4
3**2 = 9
4**2 = 16
5**2 = 25
6**2 = 36
7**2 = 49
8**2 = 64
9**2 = 81
10**2 = 100
11**2 = 121
12**2 = 144
13**2 = 169
 2//

#5	Work on created loop

3# break 3# => Permits to break the loop where it is located;
5// 
while(1){ // Loop 1
  while(1){ // Loop 2
    break; // Breaks only loop 2 !!
  }
}
 5//
3# continue 3# => Permits to force the passage at the next loop.
In fact it stops the current loop to start directly the next loop;
#0 Warning : Danger with the for loops. Don't forget that :
5// 
for(i = 0; i < x; i++){
  continue;
}
 5//
EQUAL
5// 
i = 0
while(i < x){
  continue;
  i++;
}
 5//
#0 Both are infinite loops !!

loops2.c : 2// 
#include <stdio.h>

unsigned char main(unsigned argc, unsigned char **argv){

    unsigned int value = 0;
    while(1){ // Infinite loop
        printf("Write 14 : ");
        scanf("%d", &value);
        if(value != 14){
            printf("Bad value !!\n");
            continue;
        }
        printf("Good answer !!\n");
        break;
    }

    return 0;
}
 2//

In the console : 2// 
racteur@racteurleader:~/Documents/informatic/C/3_INSTRUCTIONS/EXAMPLE$ gcc loops2.c -o prog 
racteur@racteurleader:~/Documents/informatic/C/3_INSTRUCTIONS/EXAMPLE$ ./prog 
Write 14 : 5
Bad value !!
Write 14 : 1
Bad value !!
Write 14 : 1
Bad value !!
Write 14 : 3
Bad value !!
Write 14 : 4
Bad value !!
Write 14 : 2
Bad value !!
Write 14 : 3
Bad value !!
Write 14 : 14
Good answer !!
 2//
